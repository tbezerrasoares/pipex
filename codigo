/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   codigo                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tbezerra <tbezerra@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/04/15 13:52:28 by tbezerra          #+#    #+#             */
/*   Updated: 2024/05/17 16:25:18 by tbezerra         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "pipex.h"

void	pipe_fd(int *fd, int mode, char **cmd_path)
{
	if (mode == 0)
	{
		if (dup2(fd[1], 1) == -1 || dup2(fd[0], 0) == -1)
		{
			close(fd[0]);
			close(fd[1]);
			error_pipex(cmd_path, 0);
			ft_putstr_fd("\033[31mError function pipe_fd\n\e[0m", 2);
		}
	}
	else
	{
		close(fd[0]);
		close(fd[1]);
		error_pipex(cmd_path, 0);
		ft_putstr_fd("\033[31mError function pipe_fd\n\e[0m", 2);
	}
}

/* void	dad_process(int *fd, char **argv, int argc, char **cmd_path)
{
	char	*path;
	char	**cmd;
	int		set;


	close(fd[1]);
	fd[1] = open(argv[argc], O_WRONLY | O_CREAT, 0777);
	if (fd[1] == -1)
		error_pipex(cmd_path, fd[0]);
	waitpid(-1, &set, WUNTRACED);
	pipe_fd(fd, 0, cmd_path);
	cmd = status_split(argv[argc - 1], cmd_path);
	ft_printf("teste\n");
	int		i;
	for (i = 0; cmd[i] != NULL; i++) {
        ft_printf("cmd[%d] = %s\n", i, cmd[i]);
    }
	if (cmd == NULL)
		error_pipex(cmd_path, 0);
	path = write_path(cmd[0], cmd_path);
	free_array(cmd_path, NULL);
	ft_printf("%s\n", path);
	if (execve(path, cmd, environ) == -1)
	{
		if (errno == ENOENT || errno == EKEYEXPIRED)
			cmd_not_found(cmd[0]);
		else{
			perror(strerror(errno));
			ft_putstr_fd("\033[31mError function dad_process\n\e[0m", 2);}
		free_array(cmd, path);
		exit(errno);
	}
} */

void	dad_process(int *fd, char **argv, char **cmd_path)
{
	int		fileout;

	fileout = open(argv[4], O_WRONLY | O_CREAT | O_TRUNC, 0777);
	if (fileout == -1)
		error_pipex(cmd_path, fd[0]);
	dup2(fd[0], STDIN_FILENO);
	dup2(fileout, STDOUT_FILENO);
	close(fd[1]);
	execute(argv[3], cmd_path);
}

void	son_process(int *fd, char **argv, char **cmd_path)
{
	int		filein;

	filein = open(argv[1], O_RDONLY, 0777);
	if (filein == -1)
		error_pipex(cmd_path, fd[0]);
	dup2(fd[1], STDOUT_FILENO);
	dup2(filein, STDIN_FILENO);
	close(fd[0]);
	execute(argv[2], cmd_path);
}

/* void	son_process(int *fd, char **argv, char **cmd_path)
{
	char	*path;
	char	**cmd;
	int		i;

	close(fd[0]);
	fd[0] = open(argv[1], O_RDONLY);
	if (fd[0] == -1)
		error_pipex(cmd_path, fd[1]);
	pipe_fd(fd, 0, cmd_path);
	cmd = status_split(argv[2], cmd_path);
	for (i = 0; cmd[i] != NULL; i++) {
        printf("cmd[%d] = %s\n", i, cmd[i]);
    }
	if (cmd == NULL)
		error_pipex(cmd_path, 0);
	path = write_path(cmd[0], cmd_path);
	free_array(cmd_path, NULL);
	ft_printf("%s\n", path);
	if (execve(path, cmd, environ) == -1)
	{
		if (errno == ENOENT || errno == EKEYEXPIRED)
			cmd_not_found(cmd[0]);
		else{
			perror(strerror(errno));
			ft_putstr_fd("\033[31mError function son_process\n\e[0m", 2);}
		free_array(cmd, path);
	}
	
} */

/*int	pipe_fork(char **argv, char **cmd_path)
{
	int	fd[2];
	int	id;

	if (pipe(fd) == -1)
		error_pipex(NULL, 0);
	id = fork();
	if (id == -1)
	{
		pipe_fd(fd, 1, cmd_path);
		ft_putstr_fd("\033[31mError function pipe_fork\n\e[0m", 2);
		error_pipex(NULL, 0);
	}
	else if (id == 0)
		son_process(fd, argv, cmd_path);
	else
		dad_process(fd, argv, cmd_path);
	return (0);
}*/

int	main(int argc, char **argv)
{
	int		fd[2];
	pid_t	pid1;
	char	**cmd_path;

	errno = 0;
	if (argc != 5)
	{
		ft_putstr_fd("\033[31mError in argument number\n\e[0m", 2);
		ft_putstr_fd("Ex: ./pipex <file1> <cmd1> <cmd2> <file2>\n", 1);
	}
	status_outfile(argv, --argc);
	if (access(argv[1], F_OK | R_OK) == -1)
	{
		fd[0] = open(argv[argc], O_WRONLY, O_CREAT, 0777);
		if (fd[0] == -1)
			error_pipex(NULL, 0);
		write(fd[0], "0\n", 2);
		perror(strerror(errno));
		ft_putstr_fd("\033[31mError function main\n\e[0m", 2);
		exit(0);
	}
	cmd_path = get_path(environ);
 	/*int		i;
	for (i = 0; cmd_path[i] != NULL; i++) {
		printf("cmd_path[%d] = %s\n", i, cmd_path[i]);
	} */
	pid1 = fork();
	if (pid1 == -1)
		perror(strerror(errno));
	if (pid1 == 0)
		son_process(fd, argv, cmd_path);
	waitpid(pid1, NULL, 0);
	dad_process(fd, argv, cmd_path);
	free_ft_split(cmd_path);
}
/*{
	int		fd[2];
	pid_t	pid1;

	if (argc == 5)
	{
		if (pipe(fd) == -1)
			error();
		pid1 = fork();
		if (pid1 == -1)
			error();
		if (pid1 == 0)
			child_process(argv, envp, fd);
		waitpid(pid1, NULL, 0);
		parent_process(argv, envp, fd);
	}
	else
	{
		ft_putstr_fd("\033[31mError: Bad arguments\n\e[0m", 2);
		ft_putstr_fd("Ex: ./pipex <file1> <cmd1> <cmd2> <file2>\n", 1);
	}
	return (0);
}*/

/*int main(int argc, char **argv)
{
	int		fd;
	char	**cmd_path;

	errno = 0;
	if (argc != 5)
	{
		ft_putstr_fd("\033[31mError in argument number\n\e[0m", 2);
		ft_putstr_fd("Ex: ./pipex <file1> <cmd1> <cmd2> <file2>\n", 1);
	}
	status_outfile(argv, --argc);
	if (access(argv[1], F_OK | R_OK) == -1)
	{
		fd = open(argv[argc], O_WRONLY, O_CREAT, 0777);
		if (fd == -1)
			error_pipex(NULL, 0);
		write(fd, "0\n", 2);
		perror(strerror(errno));
		ft_putstr_fd("\033[31mError function main\n\e[0m", 2);
		exit(0);
	}
	cmd_path = get_path(environ);
 	int		i;
	for (i = 0; cmd_path[i] != NULL; i++) {
        printf("cmd_path[%d] = %s\n", i, cmd_path[i]);
    } 
	return (pipe_fork(argv, cmd_path));
}*/



void	exit_handler(int n_exit)
{
	if (n_exit == 1)
		ft_putstr_fd("./pipex infile cmd cmd outfile\n", 2);
	exit(0);
}

int	open_file(char *file, int in_or_out)
{
	int	ret;

	if (in_or_out == 0)
		ret = open(file, O_RDONLY, 0777);
	if (in_or_out == 1)
		ret = open(file, O_WRONLY | O_CREAT | O_TRUNC, 0777);
	if (ret == -1)
		exit(0);
	return (ret);
}

void	ft_free_tab(char **tab)
{
	size_t	i;

	i = 0;
	while (tab[i])
	{
		free(tab[i]);
		i++;
	}
	free(tab);
}

char	*my_getenv(char *name, char **env)
{
	int		i;
	int		j;
	char	*sub;

	i = 0;
	while (env[i])
	{
		j = 0;
		while (env[i][j] && env[i][j] != '=')
			j++;
		sub = ft_substr(env[i], 0, j);
		if (ft_strcmp(sub, name) == 0)
		{
			free(sub);
			return (env[i] + j + 1);
		}
		free(sub);
		i++;
	}
	return (NULL);
}

char	*find_path(char *cmd, char **env)
{
	int		i;
	char	*exec;
	char	**allpath;
	char	*path_part;
	char	**s_cmd;

	i = -1;
	allpath = ft_split(my_getenv("PATH", env), ':');
	s_cmd = ft_split(cmd, ' ');
	while (allpath[++i])
	{
		path_part = ft_strjoin(allpath[i], "/");
		exec = ft_strjoin(path_part, s_cmd[0]);
		free(path_part);
		if (access(exec, F_OK | X_OK) == 0)
		{
			ft_free_tab(s_cmd);
			return (exec);
		}
		free(exec);
	}
	ft_free_tab(allpath);
	ft_free_tab(s_cmd);
	return (cmd);
}

void	exec(char *cmd, char **env)
{
	char	**s_cmd;
	char	*path;

	s_cmd = ft_split(cmd, ' ');
	path = find_path(s_cmd[0], env);
	if (execve(path, s_cmd, env) == -1)
	{
		ft_putstr_fd("pipex: command not found: ", 2);
		ft_putendl_fd(s_cmd[0], 2);
		ft_free_tab(s_cmd);
		exit(0);
	}
}

void	child(char **av, int *p_fd, char **env)
{
	int		fd;

	fd = open_file(av[1], 0);
	dup2(fd, 0);
	dup2(p_fd[1], 1);
	close(p_fd[0]);
	exec(av[2], env);
}

void	parent(char **av, int *p_fd, char **env)
{
	int		fd;

	fd = open_file(av[4], 1);
	dup2(fd, 1);
	dup2(p_fd[0], 0);
	close(p_fd[1]);
	exec(av[3], env);
}

int	main(int ac, char **av)
{
	int		p_fd[2];
	pid_t	pid;
	char	**env;

	if (ac != 5)
		exit_handler(1);
	if (pipe(p_fd) == -1)
		exit(-1);
	env = get_path(environ);
	pid = fork();
	if (pid == -1)
		exit(-1);
	if (!pid)
		child(av, p_fd, env);
	parent(av, p_fd, env);
}